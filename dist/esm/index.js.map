{
  "version": 3,
  "sources": ["../../node_modules/exponential-backoff/src/options.ts", "../../node_modules/exponential-backoff/src/jitter/full/full.jitter.ts", "../../node_modules/exponential-backoff/src/jitter/no/no.jitter.ts", "../../node_modules/exponential-backoff/src/jitter/jitter.factory.ts", "../../node_modules/exponential-backoff/src/delay/delay.base.ts", "../../node_modules/exponential-backoff/src/delay/skip-first/skip-first.delay.ts", "../../node_modules/exponential-backoff/src/delay/always/always.delay.ts", "../../node_modules/exponential-backoff/src/delay/delay.factory.ts", "../../node_modules/exponential-backoff/src/backoff.ts", "../../src/ari-client/ariClient.ts", "../../src/ari-client/baseClient.ts", "../../src/ari-client/resources/applications.ts", "../../src/ari-client/resources/channels.ts", "../../src/ari-client/resources/endpoints.ts", "../../src/ari-client/websocketClient.ts"],
  "sourcesContent": [null, null, null, null, null, null, null, null, null, "import { type IBackOffOptions, backOff } from \"exponential-backoff\";\nimport { BaseClient } from \"./baseClient.js\";\nimport type {\n  Application,\n  ApplicationDetails,\n} from \"./interfaces/applications.types\";\nimport type { Channel, OriginateRequest } from \"./interfaces/channels.types\";\nimport type {\n  Endpoint,\n  EndpointDetails,\n} from \"./interfaces/endpoints.types.js\";\nimport type { AriApplication, AriClientConfig } from \"./interfaces/requests.js\";\nimport { Applications } from \"./resources/applications.js\";\nimport { Channels } from \"./resources/channels.js\";\nimport { Endpoints } from \"./resources/endpoints\";\nimport { WebSocketClient } from \"./websocketClient.js\";\n\nexport class AriClient {\n  private wsClient: WebSocketClient | null = null;\n  private readonly baseClient: BaseClient;\n  private isReconnecting = false;\n\n  public channels: Channels;\n  public endpoints: Endpoints;\n  public applications: Applications;\n\n  constructor(private config: AriClientConfig) {\n    const httpProtocol = config.secure ? \"https\" : \"http\";\n    const normalizedHost = config.host.replace(/^https?:\\/\\//, \"\");\n    const baseUrl = `${httpProtocol}://${normalizedHost}:${config.port}/ari`;\n\n    this.baseClient = new BaseClient(baseUrl, config.username, config.password);\n    this.channels = new Channels(this.baseClient);\n    this.endpoints = new Endpoints(this.baseClient);\n    this.applications = new Applications(this.baseClient);\n  }\n\n  /**\n   * Connects to the ARI WebSocket for a specific application.\n   *\n   * @param app - The application name to connect to.\n   * @returns {Promise<void>} Resolves when the WebSocket connects successfully.\n   */\n  async connectWebSocket(app: string): Promise<void> {\n    if (!app) {\n      throw new Error(\n        \"The 'app' parameter is required to connect to the WebSocket.\",\n      );\n    }\n\n    if (this.isReconnecting) {\n      console.warn(\"Already attempting to reconnect. Skipping this attempt.\");\n      return;\n    }\n\n    this.isReconnecting = true;\n\n    const protocol = this.config.secure ? \"wss\" : \"ws\";\n    const wsUrl = `${protocol}://${encodeURIComponent(this.config.username)}:${encodeURIComponent(this.config.password)}@${\n      this.config.host\n    }:${this.config.port}/ari/events?app=${app}`;\n\n    const backoffOptions: IBackOffOptions = {\n      delayFirstAttempt: false,\n      startingDelay: 1000,\n      timeMultiple: 2,\n      maxDelay: 30000,\n      numOfAttempts: 10,\n      jitter: \"full\",\n      retry: (error: any, attemptNumber: number) => {\n        console.warn(`Tentativa ${attemptNumber} falhou: ${error.message}`);\n        return !this.wsClient?.isConnected();\n      },\n    };\n\n    this.wsClient = new WebSocketClient(wsUrl);\n\n    try {\n      await backOff(async () => {\n        if (!this.wsClient) {\n          throw new Error(\"WebSocketClient instance is null.\");\n        }\n        await this.wsClient.connect();\n        console.log(`WebSocket conectado para o app: ${app}`);\n        await this.ensureAppRegistered(app); // Verifica e registra o aplicativo\n      }, backoffOptions);\n    } catch (err) {\n      console.error(\n        \"N\u00E3o foi poss\u00EDvel conectar ao WebSocket ap\u00F3s m\u00FAltiplas tentativas:\",\n        err,\n      );\n      throw err;\n    } finally {\n      this.isReconnecting = false;\n    }\n  }\n\n  /**\n   * Ensures the ARI application is registered.\n   *\n   * @param app - The application name to ensure is registered.\n   * @returns {Promise<void>}\n   */\n  async ensureAppRegistered(app: string): Promise<void> {\n    try {\n      const apps = await this.baseClient.get<AriApplication[]>(\"/applications\");\n      const appExists = apps.some((a: { name: string }) => a.name === app);\n\n      if (!appExists) {\n        console.log(`Registrando o aplicativo ARI: ${app}`);\n        await this.baseClient.post(\"/applications\", { app });\n        console.log(`Aplicativo ${app} registrado com sucesso.`);\n      } else {\n        console.log(`Aplicativo ${app} j\u00E1 est\u00E1 registrado.`);\n      }\n    } catch (error) {\n      console.error(`Erro ao garantir o registro do aplicativo ${app}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Checks if the WebSocket connection is active.\n   *\n   * @returns {boolean} True if connected, false otherwise.\n   */\n  isWebSocketConnected(): boolean {\n    return this.wsClient ? this.wsClient.isConnected() : false;\n  }\n\n  /**\n   * Registers a callback for a specific WebSocket event.\n   *\n   * @param event - The WebSocket event to listen for.\n   * @param callback - The callback function to execute when the event occurs.\n   */\n  onWebSocketEvent(event: string, callback: (data: any) => void): void {\n    if (!this.wsClient) {\n      throw new Error(\"WebSocket is not connected.\");\n    }\n    this.wsClient.on(event, callback);\n  }\n\n  /**\n   * Closes the WebSocket connection.\n   */\n  closeWebSocket(): void {\n    if (this.wsClient) {\n      this.wsClient.close();\n      this.wsClient = null;\n    }\n  }\n  /**\n   * Retrieves a list of active channels from the Asterisk ARI.\n   *\n   * @returns {Promise<Channel[]>} A promise resolving to the list of active channels.\n   */\n  async listChannels(): Promise<Channel[]> {\n    return this.channels.list();\n  }\n\n  /**\n   * Initiates a new channel on the Asterisk server.\n   *\n   * @param data - The parameters for creating the new channel.\n   * @returns {Promise<Channel>} A promise resolving to the new channel's details.\n   */\n  async originateChannel(data: OriginateRequest): Promise<Channel> {\n    return this.channels.originate(data);\n  }\n\n  /**\n   * Retrieves details of a specific channel.\n   *\n   * @param channelId - The unique identifier of the channel.\n   * @returns {Promise<Channel>} A promise resolving to the details of the channel.\n   */\n  async getChannelDetails(channelId: string): Promise<Channel> {\n    return this.channels.getDetails(channelId);\n  }\n\n  /**\n   * Hangs up a specific channel.\n   *\n   * @param channelId - The unique identifier of the channel to hang up.\n   * @returns {Promise<void>}\n   */\n  async hangupChannel(channelId: string): Promise<void> {\n    return this.channels.hangup(channelId);\n  }\n\n  /**\n   * Continues the dialplan for a specific channel.\n   *\n   * @param channelId - The unique identifier of the channel.\n   * @param context - Optional. The context to continue in the dialplan.\n   * @param extension - Optional. The extension to continue in the dialplan.\n   * @param priority - Optional. The priority to continue in the dialplan.\n   * @param label - Optional. The label to continue in the dialplan.\n   * @returns {Promise<void>}\n   */\n  async continueChannelDialplan(\n    channelId: string,\n    context?: string,\n    extension?: string,\n    priority?: number,\n    label?: string,\n  ): Promise<void> {\n    return this.channels.continueDialplan(\n      channelId,\n      context,\n      extension,\n      priority,\n      label,\n    );\n  }\n\n  /**\n   * Moves a channel to another Stasis application.\n   *\n   * @param channelId - The unique identifier of the channel.\n   * @param app - The name of the Stasis application to move the channel to.\n   * @param appArgs - Optional arguments for the Stasis application.\n   * @returns {Promise<void>}\n   */\n  async moveChannelToApplication(\n    channelId: string,\n    app: string,\n    appArgs?: string,\n  ): Promise<void> {\n    return this.channels.moveToApplication(channelId, app, appArgs);\n  }\n\n  // M\u00E9todos relacionados a endpoints:\n\n  /**\n   * Lists all endpoints.\n   *\n   * @returns {Promise<Endpoint[]>} A promise resolving to the list of endpoints.\n   */\n  async listEndpoints(): Promise<Endpoint[]> {\n    return this.endpoints.list();\n  }\n\n  /**\n   * Retrieves details of a specific endpoint.\n   *\n   * @param technology - The technology of the endpoint.\n   * @param resource - The resource name of the endpoint.\n   * @returns {Promise<EndpointDetails>} A promise resolving to the details of the endpoint.\n   */\n  async getEndpointDetails(\n    technology: string,\n    resource: string,\n  ): Promise<EndpointDetails> {\n    return this.endpoints.getDetails(technology, resource);\n  }\n\n  /**\n   * Sends a message to an endpoint.\n   *\n   * @param technology - The technology of the endpoint.\n   * @param resource - The resource name of the endpoint.\n   * @param body - The message body to send.\n   * @returns {Promise<void>} A promise resolving when the message is sent.\n   */\n  async sendMessageToEndpoint(\n    technology: string,\n    resource: string,\n    body: any,\n  ): Promise<void> {\n    return this.endpoints.sendMessage(technology, resource, body);\n  }\n\n  // M\u00E9todos relacionados a applications\n  /**\n   * Lists all applications.\n   *\n   * @returns {Promise<Application[]>} A promise resolving to the list of applications.\n   */\n  async listApplications(): Promise<Application[]> {\n    return this.applications.list();\n  }\n\n  /**\n   * Retrieves details of a specific application.\n   *\n   * @param appName - The name of the application.\n   * @returns {Promise<ApplicationDetails>} A promise resolving to the application details.\n   */\n  async getApplicationDetails(appName: string): Promise<ApplicationDetails> {\n    return this.applications.getDetails(appName);\n  }\n\n  /**\n   * Sends a message to a specific application.\n   *\n   * @param appName - The name of the application.\n   * @param body - The message body to send.\n   * @returns {Promise<void>} A promise resolving when the message is sent successfully.\n   */\n  async sendMessageToApplication(appName: string, body: any): Promise<void> {\n    return this.applications.sendMessage(appName, body);\n  }\n}\n", "import axios, { type AxiosInstance } from \"axios\";\n\nexport class BaseClient {\n  private client: AxiosInstance;\n\n  constructor(baseUrl: string, username: string, password: string) {\n    this.client = axios.create({\n      baseURL: baseUrl,\n      auth: { username, password },\n    });\n  }\n\n  async get<T>(path: string): Promise<T> {\n    const response = await this.client.get<T>(path);\n    return response.data;\n  }\n\n  async post<T>(path: string, data?: unknown): Promise<T> {\n    const response = await this.client.post<T>(path, data);\n    return response.data;\n  }\n}\n", "import type { BaseClient } from \"../baseClient.js\";\nimport type {\n  Application,\n  ApplicationDetails,\n} from \"../interfaces/applications.types.js\";\n\nexport class Applications {\n  constructor(private client: BaseClient) {}\n\n  /**\n   * Lists all applications.\n   *\n   * @returns A promise that resolves to an array of Application objects representing all registered applications.\n   * @throws {Error} If the API response is not an array.\n   */\n  async list(): Promise<Application[]> {\n    const applications = await this.client.get<unknown>(\"/applications\");\n\n    if (!Array.isArray(applications)) {\n      throw new Error(\"Resposta da API /applications n\u00E3o \u00E9 um array.\");\n    }\n\n    return applications as Application[];\n  }\n\n  /**\n   * Retrieves details of a specific application.\n   *\n   * @param appName - The unique name of the application.\n   * @returns A promise that resolves to an ApplicationDetails object containing the details of the specified application.\n   */\n  async getDetails(appName: string): Promise<ApplicationDetails> {\n    return this.client.get<ApplicationDetails>(`/applications/${appName}`);\n  }\n\n  /**\n   * Sends a message to a specific application.\n   *\n   * @param appName - The unique name of the application.\n   * @param body - The message body to send.\n   * @returns A promise that resolves when the message is sent successfully.\n   */\n  async sendMessage(appName: string, body: any): Promise<void> {\n    await this.client.post<void>(`/applications/${appName}/messages`, body);\n  }\n}\n", "import type { BaseClient } from \"../baseClient.js\";\nimport type {\n  Channel,\n  OriginateRequest,\n} from \"../interfaces/channels.types.js\";\n\nexport class Channels {\n  constructor(private client: BaseClient) {}\n\n  /**\n   * Lists all active channels.\n   * \n   * @returns A promise that resolves to an array of Channel objects representing all active channels.\n   * @throws {Error} If the API response is not an array.\n   */\n  async list(): Promise<Channel[]> {\n    const channels = await this.client.get<unknown>(\"/channels\");\n\n    if (!Array.isArray(channels)) {\n      throw new Error(\"Resposta da API /channels n\u00E3o \u00E9 um array.\");\n    }\n\n    return channels as Channel[];\n  }\n\n  /**\n   * Creates a new channel.\n   * \n   * @param data - The OriginateRequest object containing the necessary data to create a new channel.\n   * @returns A promise that resolves to a Channel object representing the newly created channel.\n   */\n  async originate(data: OriginateRequest): Promise<Channel> {\n    return this.client.post<Channel>(\"/channels\", data);\n  }\n\n  /**\n   * Retrieves details of a specific channel.\n   * \n   * @param channelId - The unique identifier of the channel.\n   * @returns A promise that resolves to a Channel object containing the details of the specified channel.\n   */\n  async getDetails(channelId: string): Promise<Channel> {\n    return this.client.get<Channel>(`/channels/${channelId}`);\n  }\n\n  /**\n   * Hangs up (terminates) a specific channel.\n   * \n   * @param channelId - The unique identifier of the channel to be hung up.\n   * @returns A promise that resolves when the channel has been successfully hung up.\n   */\n  async hangup(channelId: string): Promise<void> {\n    return this.client.post<void>(`/channels/${channelId}/hangup`);\n  }\n\n  /**\n   * Continues the dialplan for a specific channel.\n   * \n   * @param channelId - The unique identifier of the channel.\n   * @param context - Optional. The context to continue in the dialplan.\n   * @param extension - Optional. The extension to continue in the dialplan.\n   * @param priority - Optional. The priority to continue in the dialplan.\n   * @param label - Optional. The label to continue in the dialplan.\n   * @returns A promise that resolves when the dialplan continuation has been successfully initiated.\n   */\n  async continueDialplan(\n    channelId: string,\n    context?: string,\n    extension?: string,\n    priority?: number,\n    label?: string,\n  ): Promise<void> {\n    return this.client.post<void>(`/channels/${channelId}/continue`, {\n      context,\n      extension,\n      priority,\n      label,\n    });\n  }\n\n  /**\n   * Moves the channel to another Stasis application.\n   * \n   * @param channelId - The unique identifier of the channel to be moved.\n   * @param app - The name of the Stasis application to move the channel to.\n   * @param appArgs - Optional. Arguments to be passed to the Stasis application.\n   * @returns A promise that resolves when the channel has been successfully moved to the new application.\n   */\n  async moveToApplication(\n    channelId: string,\n    app: string,\n    appArgs?: string,\n  ): Promise<void> {\n    return this.client.post<void>(`/channels/${channelId}/move`, {\n      app,\n      appArgs,\n    });\n  }\n}\n", "import type { BaseClient } from \"../baseClient.js\";\nimport type { Endpoint, EndpointDetails } from \"../interfaces/endpoints.types\";\n\nexport class Endpoints {\n  constructor(private client: BaseClient) {}\n\n  /**\n   * Lists all available endpoints.\n   *\n   * @returns A promise that resolves to an array of Endpoint objects representing all available endpoints.\n   * @throws {Error} If the API response is not an array.\n   */\n  async list(): Promise<Endpoint[]> {\n    const endpoints = await this.client.get<unknown>(\"/endpoints\");\n\n    if (!Array.isArray(endpoints)) {\n      throw new Error(\"Resposta da API /endpoints n\u00E3o \u00E9 um array.\");\n    }\n\n    return endpoints as Endpoint[];\n  }\n\n  /**\n   * Retrieves details of a specific endpoint.\n   *\n   * @param technology - The technology of the endpoint (e.g., \"PJSIP\").\n   * @param resource - The specific resource name of the endpoint (e.g., \"9001\").\n   * @returns A promise that resolves to an EndpointDetails object containing the details of the specified endpoint.\n   */\n  async getDetails(\n    technology: string,\n    resource: string,\n  ): Promise<EndpointDetails> {\n    return this.client.get<EndpointDetails>(\n      `/endpoints/${technology}/${resource}`,\n    );\n  }\n\n  /**\n   * Sends a message to a specific endpoint.\n   *\n   * @param technology - The technology of the endpoint (e.g., \"PJSIP\").\n   * @param resource - The specific resource name of the endpoint (e.g., \"9001\").\n   * @param message - The message payload to send to the endpoint.\n   * @returns A promise that resolves when the message has been successfully sent.\n   */\n  async sendMessage(\n    technology: string,\n    resource: string,\n    message: Record<string, unknown>,\n  ): Promise<void> {\n    await this.client.post<void>(\n      `/endpoints/${technology}/${resource}/sendMessage`,\n      message,\n    );\n  }\n}\n", "import WebSocket from \"ws\";\n\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private isClosedManually = false; // Para evitar reconex\u00F5es autom\u00E1ticas quando fechado manualmente\n  private isReconnecting = false; // Para evitar reconex\u00F5es paralelas\n\n  constructor(private url: string) {}\n\n  async connect(): Promise<void> {\n    if (this.isReconnecting) return; // Evita m\u00FAltiplas reconex\u00F5es simult\u00E2neas\n\n    return new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.url);\n\n      this.ws.on(\"open\", () => {\n        console.log(\"WebSocket conectado.\");\n        this.isClosedManually = false;\n        this.isReconnecting = false;\n        resolve();\n      });\n\n      this.ws.on(\"error\", (err) => {\n        console.error(\"Erro na conex\u00E3o WebSocket:\", err);\n        reject(err);\n      });\n\n      this.ws.on(\"close\", (code, reason) => {\n        console.warn(`WebSocket desconectado: ${code} - ${reason}`);\n        this.isReconnecting = false; // Libera novas reconex\u00F5es\n      });\n    });\n  }\n\n  async reconnect(): Promise<void> {\n    if (this.isClosedManually || this.isReconnecting) return;\n\n    console.log(\"Tentando reconectar ao WebSocket...\");\n    this.isReconnecting = true;\n    try {\n      await this.connect();\n      console.log(\"Reconex\u00E3o bem-sucedida.\");\n    } catch (err) {\n      console.error(\"Erro ao tentar reconectar:\", err);\n    } finally {\n      this.isReconnecting = false;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  on(event: string, callback: (data: any) => void): void {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      throw new Error(\"WebSocket n\u00E3o est\u00E1 conectado.\");\n    }\n\n    if (event === \"message\") {\n      this.ws.on(event, (data) => {\n        try {\n          const decodedData = JSON.parse(data.toString());\n          callback(decodedData); // Retorna o JSON j\u00E1 decodificado\n        } catch (err) {\n          console.error(\"Erro ao decodificar mensagem do WebSocket:\", err);\n          callback(data); // Retorna o buffer original em caso de erro\n        }\n      });\n    } else {\n      this.ws.on(event, callback);\n    }\n  }\n\n  send(data: any): void {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      throw new Error(\"WebSocket n\u00E3o est\u00E1 conectado.\");\n    }\n\n    this.ws.send(data, (err) => {\n      if (err) {\n        console.error(\"Erro ao enviar dados pelo WebSocket:\", err);\n      }\n    });\n  }\n\n  close(): void {\n    if (this.ws) {\n      this.isClosedManually = true;\n      this.ws.close();\n      console.log(\"WebSocket fechado manualmente.\");\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["Delay", "SkipFirstDelay", "AlwaysDelay", "backOff", "BackOff"]
}
